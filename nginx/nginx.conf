events {
    worker_connections 1024;
}

http {
    upstream service1_backend {
        # Docker automatically assigns unique names and IPs to each scaled instance
        server service1:8199;
    }

    server {
        listen 8197;

        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        location /request {
            proxy_pass http://service1_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;  # Forward the Authorization header
        }

        location /state {
            proxy_pass http://service1_backend;
        }

        location /run-log {
            auth_request /check_pause;
            error_page 401 = @auth_required;
            proxy_pass http://service1_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;  # Forward the Authorization header
        }

        # Internal authentication handler
        location /check_pause {
            internal;
            proxy_pass http://service1_backend;
        }

        # Enforce NGINX Basic Authentication if auth_request fails
        location @auth_required {
            auth_basic "The app is currently in PAUSED state";
            auth_basic_user_file /etc/nginx/.htpasswd;
        }

        # Log errors
        error_log /var/log/nginx/error.log debug;
    }
}